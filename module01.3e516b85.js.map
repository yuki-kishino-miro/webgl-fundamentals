{"mappings":"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","sources":["<anon>","src/module01/index.ts","src/module01/task01.ts","src/utils/appendTask.ts","src/utils/gl/context.ts","src/utils/gl/shader.ts","src/utils/registerOnUnload.ts","src/module01/task02.ts"],"sourcesContent":["function $d7623a482ae6c1a6$export$411674e0ed4bd05d(task, id, canvas) {\n    const section = document.createElement(\"section\");\n    section.setAttribute(\"id\", id);\n    const title = document.createElement(\"h2\");\n    title.appendChild(document.createTextNode(task));\n    section.appendChild(title);\n    if (canvas) section.appendChild(canvas);\n    else {\n        const message = document.createElement(\"p\");\n        message.appendChild(document.createTextNode(\"WebGL Context Creation Failed.\"));\n        section.appendChild(message);\n    }\n    document.body.appendChild(section);\n}\n\n\nfunction $af8a0778d80472b4$export$e55670b70abbe67e(width = 500, height = 500) {\n    const canvas = document.createElement(\"canvas\");\n    if (!canvas) return {\n        canvas: null,\n        gl: null\n    };\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    const devicePixelRatio = window.devicePixelRatio;\n    canvas.width = Math.round(width * devicePixelRatio);\n    canvas.height = Math.round(height * devicePixelRatio);\n    const gl = canvas.getContext(\"webgl\");\n    if (!gl) {\n        console.error(\"WebGL context creation error\");\n        return {\n            canvas: null,\n            gl: null\n        };\n    }\n    return {\n        canvas: canvas,\n        gl: gl\n    };\n}\n\n\nlet $255c91ee38a88f97$var$onLoadCallbacks = [];\nwindow.addEventListener(\"beforeunload\", (event)=>{\n    $255c91ee38a88f97$var$onLoadCallbacks.forEach((cb)=>{\n        try {\n            cb();\n        } catch (err) {\n            console.error(err);\n        }\n    });\n    $255c91ee38a88f97$var$onLoadCallbacks = [];\n    console.log(\"unload\");\n});\nfunction $255c91ee38a88f97$export$5477aefbaa00c1dc(cb) {\n    $255c91ee38a88f97$var$onLoadCallbacks.push(cb);\n}\n\n\nfunction $ffc995dd98846da0$var$createShader(gl, type, source) {\n    const shader = gl.createShader(type);\n    if (!shader) return null;\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!success) {\n        console.log(`Shader compiling error: ${gl.getShaderInfoLog(shader)}`);\n        gl.deleteShader(shader);\n        return null;\n    }\n    return shader;\n}\nfunction $ffc995dd98846da0$export$327d24a04cd0dc17(gl, vertexShaderSource, fragmentShaderSource) {\n    const vertexShader = $ffc995dd98846da0$var$createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = $ffc995dd98846da0$var$createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    if (!vertexShader || !fragmentShader) return null;\n    const program = gl.createProgram();\n    if (!program) {\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n        try {\n            gl.deleteProgram(program);\n        } catch (err) {}\n        return null;\n    }\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    gl.deleteShader(vertexShader);\n    gl.deleteShader(fragmentShader);\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!success) {\n        console.log(`Shader Program error: ${gl.getProgramInfoLog(program)}`);\n        gl.deleteProgram(program);\n        return null;\n    }\n    (0, $255c91ee38a88f97$export$5477aefbaa00c1dc)(()=>{\n        gl.deleteProgram(program);\n    });\n    return program;\n}\n\n\n\nconst $ed0ae0f50eb11a96$var$task = \"Task 1: Create web application to draw Hello Triangle\";\nconst $ed0ae0f50eb11a96$var$vs = `\nattribute vec2 a_position;\n\nvoid main() {\n    gl_Position = vec4(a_position, 0.0, 1.0);\n}\n`;\nconst $ed0ae0f50eb11a96$var$fs = `precision mediump float;\n\nvoid main() {\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}\n`;\nfunction $ed0ae0f50eb11a96$export$f488eec3b1efab38() {\n    const { canvas: canvas, gl: gl } = (0, $af8a0778d80472b4$export$e55670b70abbe67e)(500, 500);\n    (0, $d7623a482ae6c1a6$export$411674e0ed4bd05d)($ed0ae0f50eb11a96$var$task, \"task01\", canvas);\n    if (!canvas || !gl) return;\n    const program = (0, $ffc995dd98846da0$export$327d24a04cd0dc17)(gl, $ed0ae0f50eb11a96$var$vs, $ed0ae0f50eb11a96$var$fs);\n    if (!program) return;\n    const positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n    const positions = [\n        -0.5,\n        -0.5,\n        0.5,\n        -0.5,\n        0,\n        0.5\n    ];\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n    (0, $255c91ee38a88f97$export$5477aefbaa00c1dc)(()=>{\n        gl.deleteBuffer(positionBuffer);\n    });\n    gl.enable(gl.CULL_FACE);\n    gl.frontFace(gl.CCW);\n    gl.clearColor(0, 0, 0, 1.0);\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.useProgram(program);\n    gl.enableVertexAttribArray(positionAttributeLocation);\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n}\n\n\n\n\n\n\nconst $51b06ec8437e9c02$var$task = \"Task 2: Draw 2 triangles next to each other using glDrawArrays by adding more vertices to your data\";\nconst $51b06ec8437e9c02$var$vs = `\nattribute vec2 a_position;\n\nvoid main() {\n    gl_Position = vec4(a_position, 0.0, 1.0);\n}\n`;\nconst $51b06ec8437e9c02$var$fs = `precision mediump float;\n\nvoid main() {\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}\n`;\nfunction $51b06ec8437e9c02$export$7fc68a90b5a18743() {\n    const { canvas: canvas, gl: gl } = (0, $af8a0778d80472b4$export$e55670b70abbe67e)(500, 500);\n    (0, $d7623a482ae6c1a6$export$411674e0ed4bd05d)($51b06ec8437e9c02$var$task, \"task02\", canvas);\n    if (!canvas || !gl) return;\n    const program = (0, $ffc995dd98846da0$export$327d24a04cd0dc17)(gl, $51b06ec8437e9c02$var$vs, $51b06ec8437e9c02$var$fs);\n    if (!program) return;\n    const positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n    const positions = [\n        -0.75,\n        -0.5,\n        -0.25,\n        -0.5,\n        -0.5,\n        0.5,\n        0.25,\n        -0.5,\n        0.75,\n        -0.5,\n        0.5,\n        0.5\n    ];\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n    (0, $255c91ee38a88f97$export$5477aefbaa00c1dc)(()=>{\n        gl.deleteBuffer(positionBuffer);\n    });\n    // gl.enable(gl.DEPTH_TEST)\n    // gl.depthFunc(gl.LEQUAL)\n    gl.enable(gl.CULL_FACE);\n    gl.frontFace(gl.CCW);\n    gl.clearColor(0, 0, 0, 1.0);\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.useProgram(program);\n    gl.enableVertexAttribArray(positionAttributeLocation);\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n}\n\n\n(0, $ed0ae0f50eb11a96$export$f488eec3b1efab38)();\n(0, $51b06ec8437e9c02$export$7fc68a90b5a18743)();\n\n\n//# sourceMappingURL=module01.3e516b85.js.map\n","import {task01} from './task01'\nimport {task02} from './task02'\n\ntask01()\ntask02()\n","import { appendTask } from '../utils/appendTask'\nimport { initWebGLContext } from '../utils/gl/context'\nimport { createProgram } from '../utils/gl/shader'\nimport { registerOnUnload } from '../utils/registerOnUnload'\n\nconst task = 'Task 1: Create web application to draw Hello Triangle'\n\nconst vs = `\nattribute vec2 a_position;\n\nvoid main() {\n    gl_Position = vec4(a_position, 0.0, 1.0);\n}\n`\n\nconst fs = `precision mediump float;\n\nvoid main() {\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}\n`\n\nexport function task01() {\n    const {canvas, gl} = initWebGLContext(500, 500)\n    appendTask(task, 'task01', canvas)\n    if (!canvas || !gl) {\n        return\n    }\n\n    const program = createProgram(gl, vs, fs)\n    if (!program) {\n        return\n    }\n    const positionAttributeLocation = gl.getAttribLocation(program, \"a_position\")\n\n    const positions = [\n        -0.5, -0.5,\n        0.5, -0.5,\n        0, 0.5,\n    ]\n    const positionBuffer = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW)\n    registerOnUnload(() => {\n        gl.deleteBuffer(positionBuffer)\n    })\n\n    gl.enable(gl.CULL_FACE)\n    gl.frontFace(gl.CCW)\n    gl.clearColor(0, 0, 0, 1.0)\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n    gl.useProgram(program)\n    gl.enableVertexAttribArray(positionAttributeLocation)\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n    gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0)\n    gl.drawArrays(gl.TRIANGLES, 0, 3)\n}\n","export function appendTask(task: string, id: string, canvas: HTMLCanvasElement | null) {\n    const section = document.createElement('section')\n    section.setAttribute('id', id)\n    const title = document.createElement('h2')\n    title.appendChild(document.createTextNode(task))\n    section.appendChild(title)\n    if (canvas) {\n        section.appendChild(canvas)\n    } else {\n        const message = document.createElement('p')\n        message.appendChild(document.createTextNode('WebGL Context Creation Failed.'))\n        section.appendChild(message)\n    }\n    document.body.appendChild(section)\n}","export function initWebGLContext(width = 500, height = 500): {canvas: HTMLCanvasElement | null; gl:  WebGLRenderingContext | null} {\n    const canvas: HTMLCanvasElement | null = document.createElement('canvas')\n    if (!canvas) {\n        return {\n            canvas: null,\n            gl: null,\n        }\n    }\n    canvas.style.width = `${width}px`\n    canvas.style.height = `${height}px`\n    const devicePixelRatio = window.devicePixelRatio\n    canvas.width = Math.round(width * devicePixelRatio)\n    canvas.height = Math.round(height * devicePixelRatio)\n    const gl = canvas.getContext('webgl')\n    if (!gl) {\n        console.error('WebGL context creation error')\n        return {\n            canvas: null,\n            gl: null,\n        }\n    }\n    return {canvas, gl}\n}","import { registerOnUnload } from '../registerOnUnload'\n\nfunction createShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader | null {\n    const shader: WebGLShader | null = gl.createShader(type)\n    if (!shader) {\n        return null\n    }\n    gl.shaderSource(shader, source)\n    gl.compileShader(shader)\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n    if (!success) {\n        console.log(`Shader compiling error: ${gl.getShaderInfoLog(shader)}`)\n        gl.deleteShader(shader)\n        return null\n    }\n    return shader\n}\n\nexport function createProgram(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string): WebGLProgram | null {\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource)\n    if (!vertexShader || !fragmentShader) {\n        return null\n    }\n    const program = gl.createProgram()\n    if (!program) {\n        gl.deleteShader(vertexShader)\n        gl.deleteShader(fragmentShader)\n        try {\n            gl.deleteProgram(program)\n        } catch (err) {}\n        return null\n    }\n    gl.attachShader(program, vertexShader)\n    gl.attachShader(program, fragmentShader)\n    gl.linkProgram(program)\n    gl.deleteShader(vertexShader)\n    gl.deleteShader(fragmentShader)\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS)\n    if (!success) {\n        console.log(`Shader Program error: ${gl.getProgramInfoLog(program)}`)\n        gl.deleteProgram(program)\n        return null\n    }\n    registerOnUnload(() => {\n        gl.deleteProgram(program)\n    })\n    return program\n}","let onLoadCallbacks: (() => void)[] = []\n\nwindow.addEventListener(\"beforeunload\", (event) => {\n    onLoadCallbacks.forEach((cb) => {\n        try {\n            cb()\n        } catch (err) {\n            console.error(err)\n        }\n    })\n    onLoadCallbacks = []\n    console.log('unload')\n});\n\nexport function registerOnUnload(cb: () => void): void {\n    onLoadCallbacks.push(cb)\n}\n","import { appendTask } from '../utils/appendTask'\nimport { initWebGLContext } from '../utils/gl/context'\nimport { createProgram } from '../utils/gl/shader'\nimport { registerOnUnload } from '../utils/registerOnUnload'\n\nconst task = 'Task 2: Draw 2 triangles next to each other using glDrawArrays by adding more vertices to your data'\n\nconst vs = `\nattribute vec2 a_position;\n\nvoid main() {\n    gl_Position = vec4(a_position, 0.0, 1.0);\n}\n`\n\nconst fs = `precision mediump float;\n\nvoid main() {\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}\n`\n\nexport function task02() {\n    const {canvas, gl} = initWebGLContext(500, 500)\n    appendTask(task, 'task02', canvas)\n    if (!canvas || !gl) {\n        return\n    }\n\n    const program = createProgram(gl, vs, fs)\n    if (!program) {\n        return\n    }\n    const positionAttributeLocation = gl.getAttribLocation(program, \"a_position\")\n\n    const positions = [\n        -0.75, -0.5, \n        -0.25, -0.5,\n        -0.5, 0.5,\n        0.25, -0.5,\n        0.75, -0.5, \n        0.5, 0.5,\n    ]\n    const positionBuffer = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW)\n    registerOnUnload(() => {\n        gl.deleteBuffer(positionBuffer)\n    })\n\n    // gl.enable(gl.DEPTH_TEST)\n    // gl.depthFunc(gl.LEQUAL)\n    gl.enable(gl.CULL_FACE)\n    gl.frontFace(gl.CCW)\n    gl.clearColor(0, 0, 0, 1.0)\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n    gl.useProgram(program)\n    gl.enableVertexAttribArray(positionAttributeLocation)\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n    gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0)\n    gl.drawArrays(gl.TRIANGLES, 0, 6)\n}\n"],"names":["$d7623a482ae6c1a6$export$411674e0ed4bd05d","task","id","canvas","section","document","createElement","setAttribute","title","appendChild","createTextNode","message","body","$af8a0778d80472b4$export$e55670b70abbe67e","width","height","gl","style","devicePixelRatio","window","Math","round","getContext","console","error","$255c91ee38a88f97$var$onLoadCallbacks","$255c91ee38a88f97$export$5477aefbaa00c1dc","cb","push","$ffc995dd98846da0$var$createShader","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","deleteShader","$ffc995dd98846da0$export$327d24a04cd0dc17","vertexShaderSource","fragmentShaderSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","deleteProgram","err","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","addEventListener","event","forEach","$ed0ae0f50eb11a96$var$vs","$ed0ae0f50eb11a96$var$fs","$51b06ec8437e9c02$var$vs","$51b06ec8437e9c02$var$fs","positionAttributeLocation","getAttribLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","deleteBuffer","enable","CULL_FACE","frontFace","CCW","clearColor","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","useProgram","enableVertexAttribArray","vertexAttribPointer","FLOAT","drawArrays","TRIANGLES"],"version":3,"file":"module01.3e516b85.js.map"}